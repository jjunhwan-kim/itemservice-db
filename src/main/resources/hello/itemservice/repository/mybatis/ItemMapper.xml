<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
- id에는 Mapper 인터페이스에 설정한 메서드 이름을 지정한다.
- 파라미터는 #{} 문법을 사용하고 Mapper에서 넘긴 객체의 프로퍼티 이름을 적어준다.
- 파라미터가 2개 이상이면 Mapper 인터페이스에서 @Param으로 이름을 지정해서 파라미터를 구분한다.
- useGeneratedKeys는 데이터베이스가 키를 생성해주는 IDENTITY 전략일 때 사용한다.
- keyProperty는 생성되는 키의 프로퍼티 이름을 지정한다.
- resultType은 반환 타입을 명시한다.
- 반환 객체가 하나이면 Item, Optional<Item>과 같이 사용하고 하나 이상이면 컬렉션을 사용한다. List를 주로 사용한다.
- <where>, <if> 를 사용하여 동적 쿼리를 사용한다.
- <if>는 해당 조건이 만족하면 구문을 추가한다.
- <where>는 적절하게 where 문장을 만들어준다.
  - <if>가 모두 실패하면 SQL where 구문을 만들지 않는다.
  - <if>가 하나라도 성공하면 처음 나타나는 and를 제거한다.
- XML에 <, > 특수문자는 사용할 수 없으므로 아래와 같이 사용한다.
  - < 는 &lt;
  - > 는 &gt;
  - & 는 &amp;
  - 또는 CDATA 구문 문법을 사용한다.
  <![CDATA[
    and price <= #{maxPrice}
  ]]>
-->

<mapper namespace="hello.itemservice.repository.mybatis.ItemMapper">

    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into item (item_name, price, quantity)
        values (#{itemName}, #{price}, #{quantity})
    </insert>

    <update id="update">
        update item
        set item_name = #{updateParam.itemName},
            price = #{updateParam.price},
            quantity = #{updateParam.quantity}
        where id = #{id}
    </update>

    <select id="findById" resultType="Item">
        select id, item_name, price, quantity
        from item
        where id = #{id}
    </select>

    <select id="findAll" resultType="Item">
        select id, item_name, price, quantity
        from item
        <where>
            <if test="itemName != null and itemName != ''">
                and item_name like concat('%', #{itemName}, '%')
            </if>
            <if test="maxPrice != null">
                and price &lt;= #{maxPrice}
            </if>
        </where>
    </select>

</mapper>